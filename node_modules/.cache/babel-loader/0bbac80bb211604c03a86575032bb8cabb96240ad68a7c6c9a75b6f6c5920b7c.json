{"ast":null,"code":"var _jsxFileName = \"/Users/alexmario/Desktop/Dj Suru/src/components/SplitText.js\",\n  _s = $RefreshSig$();\nimport { useRef, useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { SplitText as GSAPSplitText } from 'gsap/SplitText';\nimport { useGSAP } from '@gsap/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ngsap.registerPlugin(ScrollTrigger, GSAPSplitText, useGSAP);\nconst SplitText = ({\n  text,\n  className = '',\n  delay = 100,\n  duration = 0.6,\n  ease = 'power3.out',\n  splitType = 'chars',\n  from = {\n    opacity: 0,\n    y: 40\n  },\n  to = {\n    opacity: 1,\n    y: 0\n  },\n  threshold = 0.1,\n  rootMargin = '-100px',\n  textAlign = 'center',\n  tag = 'p',\n  onLetterAnimationComplete\n}) => {\n  _s();\n  const ref = useRef(null);\n  const animationCompletedRef = useRef(false);\n  const [fontsLoaded, setFontsLoaded] = useState(false);\n  useEffect(() => {\n    if (document.fonts.status === 'loaded') {\n      setFontsLoaded(true);\n    } else {\n      document.fonts.ready.then(() => {\n        setFontsLoaded(true);\n      });\n    }\n  }, []);\n  useGSAP(() => {\n    if (!ref.current || !text || !fontsLoaded) return;\n    const el = ref.current;\n    if (el._rbsplitInstance) {\n      try {\n        el._rbsplitInstance.revert();\n      } catch (_) {\n        /* noop */\n      }\n      el._rbsplitInstance = null;\n    }\n    let targets;\n    const assignTargets = self => {\n      if (splitType.includes('chars') && self.chars.length) targets = self.chars;\n      if (!targets && splitType.includes('words') && self.words.length) targets = self.words;\n      if (!targets && splitType.includes('lines') && self.lines.length) targets = self.lines;\n      if (!targets) targets = self.chars || self.words || self.lines;\n    };\n    const splitInstance = new GSAPSplitText(el, {\n      type: splitType,\n      smartWrap: true,\n      autoSplit: splitType === 'lines',\n      linesClass: 'split-line',\n      wordsClass: 'split-word',\n      charsClass: 'split-char',\n      reduceWhiteSpace: false,\n      onSplit: self => {\n        assignTargets(self);\n\n        // Set initial state\n        gsap.set(targets, from);\n\n        // Animate immediately when text changes\n        const tween = gsap.to(targets, {\n          ...to,\n          duration,\n          ease,\n          stagger: delay / 1000,\n          onComplete: () => {\n            animationCompletedRef.current = true;\n            onLetterAnimationComplete === null || onLetterAnimationComplete === void 0 ? void 0 : onLetterAnimationComplete();\n          },\n          willChange: 'transform, opacity',\n          force3D: true\n        });\n        return tween;\n      }\n    });\n    el._rbsplitInstance = splitInstance;\n    return () => {\n      try {\n        splitInstance.revert();\n      } catch (_) {\n        /* noop */\n      }\n      el._rbsplitInstance = null;\n    };\n  }, {\n    dependencies: [text, delay, duration, ease, splitType, JSON.stringify(from), JSON.stringify(to), fontsLoaded, onLetterAnimationComplete],\n    scope: ref\n  });\n  const renderTag = () => {\n    const style = {\n      textAlign,\n      overflow: 'hidden',\n      display: 'inline-block',\n      whiteSpace: 'normal',\n      wordWrap: 'break-word',\n      willChange: 'transform, opacity'\n    };\n    const classes = `split-parent ${className}`;\n    switch (tag) {\n      case 'h1':\n        return /*#__PURE__*/_jsxDEV(\"h1\", {\n          ref: ref,\n          style: style,\n          className: classes,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this);\n      case 'h2':\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          ref: ref,\n          style: style,\n          className: classes,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this);\n      case 'h3':\n        return /*#__PURE__*/_jsxDEV(\"h3\", {\n          ref: ref,\n          style: style,\n          className: classes,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this);\n      case 'h4':\n        return /*#__PURE__*/_jsxDEV(\"h4\", {\n          ref: ref,\n          style: style,\n          className: classes,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this);\n      case 'h5':\n        return /*#__PURE__*/_jsxDEV(\"h5\", {\n          ref: ref,\n          style: style,\n          className: classes,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this);\n      case 'h6':\n        return /*#__PURE__*/_jsxDEV(\"h6\", {\n          ref: ref,\n          style: style,\n          className: classes,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          ref: ref,\n          style: style,\n          className: classes,\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this);\n    }\n  };\n  return renderTag();\n};\n_s(SplitText, \"LJc5LGbGuTxEDfBrGeL/yyjgHQk=\", false, function () {\n  return [useGSAP];\n});\n_c = SplitText;\nexport default SplitText;\nvar _c;\n$RefreshReg$(_c, \"SplitText\");","map":{"version":3,"names":["useRef","useEffect","useState","gsap","ScrollTrigger","SplitText","GSAPSplitText","useGSAP","jsxDEV","_jsxDEV","registerPlugin","text","className","delay","duration","ease","splitType","from","opacity","y","to","threshold","rootMargin","textAlign","tag","onLetterAnimationComplete","_s","ref","animationCompletedRef","fontsLoaded","setFontsLoaded","document","fonts","status","ready","then","current","el","_rbsplitInstance","revert","_","targets","assignTargets","self","includes","chars","length","words","lines","splitInstance","type","smartWrap","autoSplit","linesClass","wordsClass","charsClass","reduceWhiteSpace","onSplit","set","tween","stagger","onComplete","willChange","force3D","dependencies","JSON","stringify","scope","renderTag","style","overflow","display","whiteSpace","wordWrap","classes","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alexmario/Desktop/Dj Suru/src/components/SplitText.js"],"sourcesContent":["import { useRef, useEffect, useState } from 'react';\nimport { gsap } from 'gsap';\nimport { ScrollTrigger } from 'gsap/ScrollTrigger';\nimport { SplitText as GSAPSplitText } from 'gsap/SplitText';\nimport { useGSAP } from '@gsap/react';\n\ngsap.registerPlugin(ScrollTrigger, GSAPSplitText, useGSAP);\n\nconst SplitText = ({\n  text,\n  className = '',\n  delay = 100,\n  duration = 0.6,\n  ease = 'power3.out',\n  splitType = 'chars',\n  from = { opacity: 0, y: 40 },\n  to = { opacity: 1, y: 0 },\n  threshold = 0.1,\n  rootMargin = '-100px',\n  textAlign = 'center',\n  tag = 'p',\n  onLetterAnimationComplete\n}) => {\n  const ref = useRef(null);\n  const animationCompletedRef = useRef(false);\n  const [fontsLoaded, setFontsLoaded] = useState(false);\n\n  useEffect(() => {\n    if (document.fonts.status === 'loaded') {\n      setFontsLoaded(true);\n    } else {\n      document.fonts.ready.then(() => {\n        setFontsLoaded(true);\n      });\n    }\n  }, []);\n\n  useGSAP(\n    () => {\n      if (!ref.current || !text || !fontsLoaded) return;\n      const el = ref.current;\n\n      if (el._rbsplitInstance) {\n        try {\n          el._rbsplitInstance.revert();\n        } catch (_) {\n          /* noop */\n        }\n        el._rbsplitInstance = null;\n      }\n\n      let targets;\n      const assignTargets = self => {\n        if (splitType.includes('chars') && self.chars.length) targets = self.chars;\n        if (!targets && splitType.includes('words') && self.words.length) targets = self.words;\n        if (!targets && splitType.includes('lines') && self.lines.length) targets = self.lines;\n        if (!targets) targets = self.chars || self.words || self.lines;\n      };\n\n      const splitInstance = new GSAPSplitText(el, {\n        type: splitType,\n        smartWrap: true,\n        autoSplit: splitType === 'lines',\n        linesClass: 'split-line',\n        wordsClass: 'split-word',\n        charsClass: 'split-char',\n        reduceWhiteSpace: false,\n        onSplit: self => {\n          assignTargets(self);\n\n          // Set initial state\n          gsap.set(targets, from);\n\n          // Animate immediately when text changes\n          const tween = gsap.to(targets, {\n            ...to,\n            duration,\n            ease,\n            stagger: delay / 1000,\n            onComplete: () => {\n              animationCompletedRef.current = true;\n              onLetterAnimationComplete?.();\n            },\n            willChange: 'transform, opacity',\n            force3D: true\n          });\n\n          return tween;\n        }\n      });\n\n      el._rbsplitInstance = splitInstance;\n\n      return () => {\n        try {\n          splitInstance.revert();\n        } catch (_) {\n          /* noop */\n        }\n        el._rbsplitInstance = null;\n      };\n    },\n    {\n      dependencies: [\n        text,\n        delay,\n        duration,\n        ease,\n        splitType,\n        JSON.stringify(from),\n        JSON.stringify(to),\n        fontsLoaded,\n        onLetterAnimationComplete\n      ],\n      scope: ref\n    }\n  );\n\n  const renderTag = () => {\n    const style = {\n      textAlign,\n      overflow: 'hidden',\n      display: 'inline-block',\n      whiteSpace: 'normal',\n      wordWrap: 'break-word',\n      willChange: 'transform, opacity'\n    };\n    const classes = `split-parent ${className}`;\n    switch (tag) {\n      case 'h1':\n        return (\n          <h1 ref={ref} style={style} className={classes}>\n            {text}\n          </h1>\n        );\n      case 'h2':\n        return (\n          <h2 ref={ref} style={style} className={classes}>\n            {text}\n          </h2>\n        );\n      case 'h3':\n        return (\n          <h3 ref={ref} style={style} className={classes}>\n            {text}\n          </h3>\n        );\n      case 'h4':\n        return (\n          <h4 ref={ref} style={style} className={classes}>\n            {text}\n          </h4>\n        );\n      case 'h5':\n        return (\n          <h5 ref={ref} style={style} className={classes}>\n            {text}\n          </h5>\n        );\n      case 'h6':\n        return (\n          <h6 ref={ref} style={style} className={classes}>\n            {text}\n          </h6>\n        );\n      default:\n        return (\n          <p ref={ref} style={style} className={classes}>\n            {text}\n          </p>\n        );\n    }\n  };\n  return renderTag();\n};\n\nexport default SplitText;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}