{"ast":null,"code":"import { PureComponent } from 'react';\nimport { getDisplayTimeBySeconds } from './utils';\nclass CurrentTime extends PureComponent {\n  hasAddedAudioEventListener = false;\n  constructor(props) {\n    super(props);\n    const {\n      audio,\n      defaultCurrentTime,\n      isLeftTime,\n      timeFormat\n    } = props;\n    let currentTime = defaultCurrentTime;\n    if (audio) {\n      currentTime = getDisplayTimeBySeconds(isLeftTime ? audio.duration - audio.currentTime : audio.currentTime, audio.duration, timeFormat);\n    }\n    this.state = {\n      currentTime\n    };\n  }\n  state = {\n    currentTime: this.props.defaultCurrentTime\n  };\n  handleAudioCurrentTimeChange = e => {\n    const audio = e.target;\n    const {\n      isLeftTime,\n      timeFormat,\n      defaultCurrentTime\n    } = this.props;\n    this.setState({\n      currentTime: getDisplayTimeBySeconds(isLeftTime ? audio.duration - audio.currentTime : audio.currentTime, audio.duration, timeFormat) || defaultCurrentTime\n    });\n  };\n  addAudioEventListeners = () => {\n    const {\n      audio\n    } = this.props;\n    if (audio && !this.hasAddedAudioEventListener) {\n      this.audio = audio;\n      this.hasAddedAudioEventListener = true;\n      audio.addEventListener('timeupdate', this.handleAudioCurrentTimeChange);\n      audio.addEventListener('loadedmetadata', this.handleAudioCurrentTimeChange);\n    }\n  };\n  componentDidMount() {\n    this.addAudioEventListeners();\n  }\n  componentDidUpdate() {\n    this.addAudioEventListeners();\n  }\n  componentWillUnmount() {\n    if (this.audio && this.hasAddedAudioEventListener) {\n      this.audio.removeEventListener('timeupdate', this.handleAudioCurrentTimeChange);\n      this.audio.removeEventListener('loadedmetadata', this.handleAudioCurrentTimeChange);\n    }\n  }\n  render() {\n    return this.state.currentTime;\n  }\n}\nexport default CurrentTime;","map":{"version":3,"names":["PureComponent","getDisplayTimeBySeconds","CurrentTime","hasAddedAudioEventListener","constructor","props","audio","defaultCurrentTime","isLeftTime","timeFormat","currentTime","duration","state","handleAudioCurrentTimeChange","e","target","setState","addAudioEventListeners","addEventListener","componentDidMount","componentDidUpdate","componentWillUnmount","removeEventListener","render"],"sources":["/Users/alexmario/Desktop/Dj Suru/node_modules/react-h5-audio-player/es/CurrentTime.js"],"sourcesContent":["import { PureComponent } from 'react';\nimport { getDisplayTimeBySeconds } from './utils';\nclass CurrentTime extends PureComponent {\n  hasAddedAudioEventListener = false;\n  constructor(props) {\n    super(props);\n    const {\n      audio,\n      defaultCurrentTime,\n      isLeftTime,\n      timeFormat\n    } = props;\n    let currentTime = defaultCurrentTime;\n    if (audio) {\n      currentTime = getDisplayTimeBySeconds(isLeftTime ? audio.duration - audio.currentTime : audio.currentTime, audio.duration, timeFormat);\n    }\n    this.state = {\n      currentTime\n    };\n  }\n  state = {\n    currentTime: this.props.defaultCurrentTime\n  };\n  handleAudioCurrentTimeChange = e => {\n    const audio = e.target;\n    const {\n      isLeftTime,\n      timeFormat,\n      defaultCurrentTime\n    } = this.props;\n    this.setState({\n      currentTime: getDisplayTimeBySeconds(isLeftTime ? audio.duration - audio.currentTime : audio.currentTime, audio.duration, timeFormat) || defaultCurrentTime\n    });\n  };\n  addAudioEventListeners = () => {\n    const {\n      audio\n    } = this.props;\n    if (audio && !this.hasAddedAudioEventListener) {\n      this.audio = audio;\n      this.hasAddedAudioEventListener = true;\n      audio.addEventListener('timeupdate', this.handleAudioCurrentTimeChange);\n      audio.addEventListener('loadedmetadata', this.handleAudioCurrentTimeChange);\n    }\n  };\n  componentDidMount() {\n    this.addAudioEventListeners();\n  }\n  componentDidUpdate() {\n    this.addAudioEventListeners();\n  }\n  componentWillUnmount() {\n    if (this.audio && this.hasAddedAudioEventListener) {\n      this.audio.removeEventListener('timeupdate', this.handleAudioCurrentTimeChange);\n      this.audio.removeEventListener('loadedmetadata', this.handleAudioCurrentTimeChange);\n    }\n  }\n  render() {\n    return this.state.currentTime;\n  }\n}\nexport default CurrentTime;"],"mappings":"AAAA,SAASA,aAAa,QAAQ,OAAO;AACrC,SAASC,uBAAuB,QAAQ,SAAS;AACjD,MAAMC,WAAW,SAASF,aAAa,CAAC;EACtCG,0BAA0B,GAAG,KAAK;EAClCC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,MAAM;MACJC,KAAK;MACLC,kBAAkB;MAClBC,UAAU;MACVC;IACF,CAAC,GAAGJ,KAAK;IACT,IAAIK,WAAW,GAAGH,kBAAkB;IACpC,IAAID,KAAK,EAAE;MACTI,WAAW,GAAGT,uBAAuB,CAACO,UAAU,GAAGF,KAAK,CAACK,QAAQ,GAAGL,KAAK,CAACI,WAAW,GAAGJ,KAAK,CAACI,WAAW,EAAEJ,KAAK,CAACK,QAAQ,EAAEF,UAAU,CAAC;IACxI;IACA,IAAI,CAACG,KAAK,GAAG;MACXF;IACF,CAAC;EACH;EACAE,KAAK,GAAG;IACNF,WAAW,EAAE,IAAI,CAACL,KAAK,CAACE;EAC1B,CAAC;EACDM,4BAA4B,GAAGC,CAAC,IAAI;IAClC,MAAMR,KAAK,GAAGQ,CAAC,CAACC,MAAM;IACtB,MAAM;MACJP,UAAU;MACVC,UAAU;MACVF;IACF,CAAC,GAAG,IAAI,CAACF,KAAK;IACd,IAAI,CAACW,QAAQ,CAAC;MACZN,WAAW,EAAET,uBAAuB,CAACO,UAAU,GAAGF,KAAK,CAACK,QAAQ,GAAGL,KAAK,CAACI,WAAW,GAAGJ,KAAK,CAACI,WAAW,EAAEJ,KAAK,CAACK,QAAQ,EAAEF,UAAU,CAAC,IAAIF;IAC3I,CAAC,CAAC;EACJ,CAAC;EACDU,sBAAsB,GAAGA,CAAA,KAAM;IAC7B,MAAM;MACJX;IACF,CAAC,GAAG,IAAI,CAACD,KAAK;IACd,IAAIC,KAAK,IAAI,CAAC,IAAI,CAACH,0BAA0B,EAAE;MAC7C,IAAI,CAACG,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACH,0BAA0B,GAAG,IAAI;MACtCG,KAAK,CAACY,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAACL,4BAA4B,CAAC;MACvEP,KAAK,CAACY,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAACL,4BAA4B,CAAC;IAC7E;EACF,CAAC;EACDM,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACF,sBAAsB,CAAC,CAAC;EAC/B;EACAG,kBAAkBA,CAAA,EAAG;IACnB,IAAI,CAACH,sBAAsB,CAAC,CAAC;EAC/B;EACAI,oBAAoBA,CAAA,EAAG;IACrB,IAAI,IAAI,CAACf,KAAK,IAAI,IAAI,CAACH,0BAA0B,EAAE;MACjD,IAAI,CAACG,KAAK,CAACgB,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAACT,4BAA4B,CAAC;MAC/E,IAAI,CAACP,KAAK,CAACgB,mBAAmB,CAAC,gBAAgB,EAAE,IAAI,CAACT,4BAA4B,CAAC;IACrF;EACF;EACAU,MAAMA,CAAA,EAAG;IACP,OAAO,IAAI,CAACX,KAAK,CAACF,WAAW;EAC/B;AACF;AACA,eAAeR,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}